# Example: Using the CDKTF-generated module as a reusable module
#
# This demonstrates how to use the HCL generated by CDKTF as a traditional Terraform module

terraform {
  required_providers {
    local = {
      source  = "hashicorp/local"
      version = "~> 2.0"
    }
  }
}

# Option 1: Use the module from local directory (after synth)
# Uncomment this section after running: npx cdktf synth --hcl
#
# module "html_page" {
#   source = "../cdktf.out/stacks/SimpleTestStack"
#   
#   filename = "./output/example.html"
#   title    = "Example Page"
#   message  = "This page was created using a CDKTF-generated module!"
# }

# Option 2: Use multiple instances of the module
# This shows how you'd call the module multiple times with different inputs
#
# module "welcome_page" {
#   source = "../cdktf.out/stacks/SimpleTestStack"
#   
#   filename = "./output/welcome.html"
#   title    = "Welcome to Our Site"
#   message  = "Thank you for visiting! We're glad to have you here."
# }
#
# module "about_page" {
#   source = "../cdktf.out/stacks/SimpleTestStack"
#   
#   filename = "./output/about.html"
#   title    = "About Us"
#   message  = "We are a team dedicated to building amazing things with infrastructure as code."
# }
#
# module "contact_page" {
#   source = "../cdktf.out/stacks/SimpleTestStack"
#   
#   filename = "./output/contact.html"
#   title    = "Contact Us"
#   message  = "Get in touch with us. We'd love to hear from you!"
# }

# Output the created file paths
# output "created_pages" {
#   description = "Paths to all created HTML pages"
#   value = {
#     welcome = module.welcome_page.created_file
#     about   = module.about_page.created_file
#     contact = module.contact_page.created_file
#   }
# }

# Note: For this to work, you'll need to:
# 1. Run: npx cdktf synth --hcl
# 2. Uncomment the module calls above
# 3. Run: terraform init && terraform apply

