import { App, TerraformStack, TerraformVariable, TerraformOutput } from "cdktf";
import { Construct } from "constructs";
import { LocalProvider } from "@cdktf/provider-local/lib/provider";
import { File } from "@cdktf/provider-local/lib/file";

/**
 * CDKTF stack that creates an HTML file using the local provider
 */
class HtmlFileStack extends TerraformStack {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    // Setup local provider
    new LocalProvider(this, "local");

    // Remove the backend block by setting it to undefined
    // This uses the escape hatch to prevent backend from being generated in the hcl module.
    this.addOverride("terraform", {
      backend: undefined,
    });

    // Define variables - simple string variables
    const filenameVar = new TerraformVariable(this, "filename", {
      type: "string",
      description: "Filename for the HTML file",
      default: "./output/demo.html",
    });

    const titleVar = new TerraformVariable(this, "title", {
      type: "string",
      description: "Title for the HTML page",
      default: "CDKTF Generated Module Demo",
    });

    const messageVar = new TerraformVariable(this, "message", {
      type: "string",
      description: "Message content for the HTML page",
      default: `<div class="tenor-gif-embed" data-postid="15810606" data-share-method="host" data-aspect-ratio="1.40969" data-width="100%"><a href="https://tenor.com/view/disney-moana-youre-welcome-maui-dance-gif-15810606">Disney Moana GIF</a>from <a href="https://tenor.com/search/disney-gifs">Disney GIFs</a></div> <script type="text/javascript" async src="https://tenor.com/embed.js"></script>`
    });

    // Create HTML content using variables
    const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>\${var.title}</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
        background-color: #f5f5f5;
      }
      .container {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }
      .header {
        color: #2c5aa0;
        border-bottom: 2px solid #2c5aa0;
        padding-bottom: 1rem;
        margin-bottom: 1rem;
      }
      .message {
        font-size: 1.1em;
        line-height: 1.6;
        color: #333;
      }
      .footer {
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid #ddd;
        font-size: 0.9em;
        color: #666;
      }
      .badge {
        background: #2c5aa0;
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8em;
      }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="header">\${var.title}</h1>
        <div class="message">
            <p>\${var.message}</p>
        </div>
        <div class="footer">
            <p><span class="badge">Terraform Module Generated by CDKTF</span></p>
            <p><strong>Module:</strong> Proof of Concept</p>
        </div>
    </div>
</body>
</html>`;

    // Create a single file resource
    const htmlFile = new File(this, "html_file", {
      filename: filenameVar.stringValue,
      content: htmlContent,
    });

    // Add output
    new TerraformOutput(this, "created_file", {
      value: htmlFile.filename,
      description: "Path to the created HTML file",
    });
  }
}

// Only run synth if this file is executed directly
if (require.main === module) {
  const app = new App();
  new HtmlFileStack(app, "SimpleTestStack");
  app.synth();
}

// Re-export for documentation
export { HtmlFileModule, HtmlFileModuleConfig } from "./html-file-module";
