import { Construct } from "constructs";
import { File } from "@cdktf/provider-local/lib/file";

export interface HtmlFileModuleConfig {
  /**
   * The file path where the HTML file will be created.
   */
  filename: string;

  /**
   * The title for the HTML page.
   */
  title: string;

  /**
   * The main content/message to display in the HTML body.
   */
  bodyMessage: string;

  /**
   * Additional CSS styles to apply.
   * @default Basic styling
   */
  customStyles?: string;

  /**
   * The HTML template to use. If not provided, uses a default template.
   */
  htmlTemplate?: string;

  /**
   * Whether to include a timestamp in the file.
   * @default true
   */
  includeTimestamp?: boolean;
}

export class HtmlFileModule extends Construct {
  public readonly file: File;
  public readonly filename: string;
  public readonly content: string;

  constructor(scope: Construct, id: string, config: HtmlFileModuleConfig) {
    super(scope, id);

    const timestamp =
      config.includeTimestamp !== false ? new Date().toISOString() : "";

    const defaultStyles = `
      body {
        font-family: Arial, sans-serif;
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
        background-color: #f5f5f5;
      }
      .container {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }
      .header {
        color: #2c5aa0;
        border-bottom: 2px solid #2c5aa0;
        padding-bottom: 1rem;
        margin-bottom: 1rem;
      }
      .message {
        font-size: 1.1em;
        line-height: 1.6;
        color: #333;
      }
      .footer {
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid #ddd;
        font-size: 0.9em;
        color: #666;
      }
      .badge {
        background: #2c5aa0;
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8em;
      }
    `;

    const styles = config.customStyles || defaultStyles;

    // Generate HTML content
    this.content =
      config.htmlTemplate ||
      `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${config.title}</title>
    <style>${styles}</style>
</head>
<body>
    <div class="container">
        <h1 class="header">${config.title}</h1>
        <div class="message">
            <p>${config.bodyMessage}</p>
            <p>
              <iframe width="623" height="1107" src="https://www.youtube.com/embed/6Dw3zcPmG0M"
                title="You&#39;re Welcome (From &quot;Moana&quot;) #Disney100 #Shorts"
                frameborder="0"
                allow="accelerometer;
                autoplay;
                clipboard-write;
                encrypted-media;
                gyroscope;
                picture-in-picture;
                web-share"
                referrerpolicy="strict-origin-when-cross-origin"
                allowfullscreen>
              </iframe>
            </p>
        </div>
        <div class="footer">
            <p><span class="badge">Generated by CDKTF</span></p>
            ${timestamp ? `<p><strong>Created:</strong> ${timestamp}</p>` : ""}
            <p><strong>Module:</strong> HtmlFileModule</p>
        </div>
    </div>
</body>
</html>`;

    // Create the local file
    this.file = new File(this, "html-file", {
      filename: config.filename,
      content: this.content,
    });

    this.filename = config.filename;
  }

  /**
   * Get the file content
   */
  public getContent(): string {
    return this.content;
  }

  /**
   * Get the file path
   */
  public getFilename(): string {
    return this.filename;
  }
}
