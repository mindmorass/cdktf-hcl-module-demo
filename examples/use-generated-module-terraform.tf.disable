# Example: Using the CDKTF-generated HCL module with traditional Terraform

terraform {
  required_providers {
    local = {
      source  = "hashicorp/local"
      version = "~> 2.0"
    }
  }
}

module "html_files" {
  source = "../generated-hcl-module"
  
  body_message = "This HTML was created using traditional Terraform calling a CDKTF-generated HCL module! This shows perfect compatibility between CDKTF and Terraform workflows."
  title        = "Traditional Terraform Usage"
  output_dir   = "./output"
  
  files = {
    terraform_demo = {
      filename = "./output/terraform-demo.html"
      content = <<-EOT
<!DOCTYPE html>
<html>
<head><title>Terraform Demo</title></head>
<body style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 2rem;">
  <div style="background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
    <h1 style="color: #2c5aa0; border-bottom: 2px solid #2c5aa0; padding-bottom: 1rem;">
      Generated by Traditional Terraform
    </h1>
    <p style="font-size: 1.1em; line-height: 1.6;">
      This HTML file was created using traditional Terraform with an HCL module that was originally generated by CDKTF.
    </p>
    <div style="background: #f8f9fa; padding: 1rem; border-radius: 5px; margin: 1rem 0;">
      <strong>ðŸŽ¯ Workflow Demonstrated:</strong><br/>
      1. Write module in CDKTF (TypeScript)<br/>
      2. Synthesize to HCL Terraform<br/>
      3. Extract as reusable HCL module<br/>
      4. Use with traditional <code>terraform</code> commands
    </div>
    <div style="background: #d4edda; padding: 1rem; border-radius: 5px; margin: 1rem 0;">
      <span style="background: #28a745; color: white; padding: 0.2rem 0.5rem; border-radius: 4px; font-size: 0.8em;">
        Generated by Traditional Terraform
      </span>
    </div>
  </div>
</body>
</html>
EOT
    }
  }
}

output "terraform_created_files" {
  description = "Files created by traditional Terraform"
  value       = module.html_files.created_files
}
